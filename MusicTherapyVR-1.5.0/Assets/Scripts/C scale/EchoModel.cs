using System.Collections;
using System.Collections.Generic;
using Normal.Realtime;
using Normal.Realtime.Serialization;
using UnityEngine;

namespace C_scale
{
    [RealtimeModel]
    public partial class EchoModel : RealtimeModel
    {
        [RealtimeProperty(1, true, true)] private bool _echo;
    }

}

/* ----- Begin Normal Autogenerated Code ----- */
namespace C_scale {
    public partial class EchoModel : RealtimeModel {
        public bool echo {
            get {
                return _echoProperty.value;
            }
            set {
                if (_echoProperty.value == value) return;
                _echoProperty.value = value;
                InvalidateReliableLength();
                FireEchoDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(EchoModel model, T value);
        public event PropertyChangedHandler<bool> echoDidChange;
        
        public enum PropertyID : uint {
            Echo = 1,
        }
        
        #region Properties
        
        private ReliableProperty<bool> _echoProperty;
        
        #endregion
        
        public EchoModel() : base(null) {
            _echoProperty = new ReliableProperty<bool>(1, _echo);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _echoProperty.UnsubscribeCallback();
        }
        
        private void FireEchoDidChange(bool value) {
            try {
                echoDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _echoProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _echoProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.Echo: {
                        changed = _echoProperty.Read(stream, context);
                        if (changed) FireEchoDidChange(echo);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _echo = echo;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
